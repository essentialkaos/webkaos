diff -urN naxsi-1.3-orig/naxsi_src/naxsi.h naxsi-1.3/naxsi_src/naxsi.h
--- naxsi-1.3-orig/naxsi_src/naxsi.h	2020-11-17 16:46:31.000000000 +0300
+++ naxsi-1.3/naxsi_src/naxsi.h	2022-07-04 14:59:17.000000000 +0300
@@ -9,12 +9,12 @@
 
 #define NAXSI_VERSION "1.3"
 
+#include <ngx_config.h>
+#include <ngx_core.h>
 #include "ext/libinjection/libinjection_sqli.h"
 #include "ext/libinjection/libinjection_xss.h"
 #include <ctype.h>
 #include <nginx.h>
-#include <ngx_config.h>
-#include <ngx_core.h>
 #include <ngx_event.h>
 #include <ngx_http.h>
 #include <ngx_http_core_module.h>
diff -urN naxsi-1.3-orig/naxsi_src/naxsi_runtime.c naxsi-1.3/naxsi_src/naxsi_runtime.c
--- naxsi-1.3-orig/naxsi_src/naxsi_runtime.c	2020-11-17 16:46:31.000000000 +0300
+++ naxsi-1.3/naxsi_src/naxsi_runtime.c	2022-07-04 15:10:42.000000000 +0300
@@ -4,8 +4,8 @@
  * Licensed under GNU GPL v3.0 â€“ See the LICENSE notice for details
  */
 
-#include "assert.h"
 #include "naxsi.h"
+#include "assert.h"
 #include "naxsi_macros.h"
 #include "naxsi_net.h"
 
@@ -2835,11 +2835,13 @@
       /* and the presence of data to parse */
       r->request_body && ((!ctx->block || ctx->learning) && !ctx->drop))
     ngx_http_naxsi_body_parse(ctx, r, cf, main_cf);
+#if (NGX_HTTP_X_FORWARDED_FOR)
   ngx_str_t tag;
   tag.len  = 15;
   tag.data = ngx_pcalloc(r->pool, tag.len + 1);
   if (tag.data)
     memcpy(tag.data, "x-forwarded-for", 15);
+#if (nginx_version < 1023000)
   unsigned int      n = 0;
   ngx_table_elt_t** h = NULL;
   ngx_array_t       a;
@@ -2854,6 +2856,16 @@
 
     ngx_http_naxsi_update_current_ctx_status(ctx, cf, r, &tag, (ngx_str_t*)h[0]->value.data);
   }
+#else
+  ngx_table_elt_t* xff = NULL;
+  if (r->headers_in.x_forwarded_for != NULL) {
+    xff = r->headers_in.x_forwarded_for;
+    ngx_log_debug(NGX_LOG_DEBUG_HTTP, r->connection->log, 0, "xfor %s", xff->value.data);
+
+    ngx_http_naxsi_update_current_ctx_status(ctx, cf, r, &tag, (ngx_str_t*)xff->value.data);
+  }
+#endif
+#endif
 }
 
 void
@@ -2868,18 +2880,20 @@
   ngx_http_check_rule_t* cr;
 
   ngx_http_special_score_t* sc;
-  unsigned int              n = 0;
 
   NX_DEBUG(_debug_custom_score, NGX_LOG_DEBUG_HTTP, r->connection->log, 0, "XX-custom check rules");
 
-  int               ignore = 0;
-  ngx_table_elt_t** h;
-  ngx_array_t       a;
+  int ignore = 0;
 
   ctx->ignore = 0;
 
   /*cr, sc, cf, ctx*/
   if (cf->check_rules && ctx->special_scores) {
+#if (NGX_HTTP_X_FORWARDED_FOR)
+#if (nginx_version < 1023000)
+      unsigned int  n = 0;
+      ngx_table_elt_t** h;
+      ngx_array_t       a;
     if (r->headers_in.x_forwarded_for.nelts >= 1) {
       a = r->headers_in.x_forwarded_for;
       n = a.nelts;
@@ -2897,7 +2911,26 @@
         memcpy(ip.data, h[0]->value.data, ip.len);
         ignore = nx_can_ignore_ip(&ip, cf) || nx_can_ignore_cidr(&ip, cf);
       }
-    } else {
+    } else
+#else
+    ngx_table_elt_t* xff;
+    if (r->headers_in.x_forwarded_for != NULL) {
+      xff = r->headers_in.x_forwarded_for;
+      NX_DEBUG(_debug_whitelist_ignore,
+                 NGX_LOG_DEBUG_HTTP,
+                 r->connection->log,
+                 0,
+                 "XX- lookup ignore X-Forwarded-For: %s",
+                 xff->value.data);
+      ngx_str_t ip;
+      ip.len  = strlen((char*)xff->value.data);
+      ip.data = ngx_pcalloc(r->pool, ip.len + 1);
+      memcpy(ip.data, xff->value.data, ip.len);
+      ignore = nx_can_ignore_ip(&ip, cf) || nx_can_ignore_cidr(&ip, cf);
+    } else
+#endif
+#endif
+      {
       ngx_str_t* ip = &r->connection->addr_text;
       NX_DEBUG(_debug_whitelist_ignore,
                NGX_LOG_DEBUG_HTTP,
